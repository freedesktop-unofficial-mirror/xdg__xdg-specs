Free Media Player Specifications

Tag Specification

version 1.0 RC1; May 30th, 2010

Copyright 2009-2010 by Jeff Mitchell <[mitchell@kde.org]>

Abstract

This specification describes various audio file tag metadata 
intended to increase interoperability between free music players 
for things such as ratings, playcounts, performer roles, and 
more. It does this by proposing standards for common 
functionality needs where none currently exist, and doing so in a 
way that is easily adoptable cross-player and cross-format. It is 
designed to be robust against future needs and to prevent 
possible conflicts with other tag identifiers and values.

Table of Contents

    1 License
    2 Audio Metadata Tags
        2.1 Common Data and Tag Information
            2.1.1 MP3
            2.1.2 VorbisComments
            2.1.3 APEv2
            2.1.4 MP4
            2.1.5 Windows Media
        2.2 Rating Tags
            2.2.1 All Rating Tags
            2.2.2 FMPS_Rating
            2.2.3 FMPS_Rating_User
        2.3 FMPS_Rating_Critic
            2.3.1 FMPS_Rating_Algorithm
        2.4 Playcount Tags
            2.4.1 User Playcount Criteria
            2.4.2 All Playcount Tags
            2.4.3 FMPS_Playcount
            2.4.4 FMPS_Playcount_User
            2.4.5 FMPS_Playcount_Algorithm
        2.5 Performer Roles
        2.6 Lyrics
        2.7 Compilation Identifier


1 License

This specification is licensed under the Creative Commons 
Attribution-No Derivative Works 3.0 Unported License. You are 
free to copy, distribute and transmit this work, provided that 
the copyright information and full URL to the license information 
page (http://creativecommons.org/licenses/by-nd/3.0/) remain 
intact. You may not alter, transform, or build upon this work.

The reason No Derivative Works is specified is due to the status 
of this document as a specification. Specifications become 
useless if they go forth and multiply; the utility of a 
specification lies in having a common shared document. If there 
is something that you feel needs to be added, updated or changed 
in this specification, please email the author, who will be glad 
to work with all interested parties.

2 Audio Metadata Tags

The metadata tag formats evolved from Quod Libet's VorbisComments 
suggestions at http://code.google.com/p/quodlibet/wiki/Specs_VorbisComments
, however this attempts to not only address ambiguities and 
incompatibilities with the specification at that URL, but also to 
define how this functionality should be applied across formats. 
It is intended that as usable ways of inserting the metadata 
described become available for formats not currently specified, 
that this document will be updated to meet those needs.

All newly-specified tags carry an identifier “FMPS_” to tie the 
tags to this specification. The reason is simple: since the 
official metadata specifications either fail to define or define 
unusable tags, these values are only official to the extent that 
this specification is adopted. Without an identifier to give 
context to the meanings and limitations of the values, there is a 
real possibility that a noncompliant media player will use the 
same tag names in an incompatible fashion, whether intentionally 
or not, and there is no way to determine whether a seemingly 
compatible use of the tags by a noncompliant player actually 
results in user-intended behavior. The “FMPS_” identifier and 
this specification document is therefore used in a similar 
fashion to XML schema declarations.

As these identifiers are read and modified only by players and 
advanced users, it is not expected to be a hindrance to adoption 
or to cause undue burden on either.

2.1 Common Data and Tag Information

This section provides “up-front” information that is pertinent to 
all tags described below, such as what encoding to use and which 
tags to use in various formats.

For all tag formats, the following is defined:

• All identifiers are ASCII strings, and defined in the sections 
  below.

• All values are strings, which must adhere to the allowed 
  encoding and length limits in the relevant specifications, but 
  should use Unicode whenever possible.

  – To keep the specification simple, no ranges of control 
    characters are defined which should never be included in a 
    string. It is assumed that the used string-handling library 
    will properly handle any such characters encountered. It is 
    highly recommended, however, that no such control characters 
    are used, except when specified below.

• Although identifier case is specified for the different types 
  of tags, comparisons against identifier strings MUST be 
  case-insensitive.

• A period/full stop is used to separate the digits in a float 
  value from the fractional part of the float. All float values 
  MUST include a period/full stop (1 is not acceptable; 1.0 is 
  correct).

• Float values should be limited to six decimal places.

• All lists are value strings. For any lists, entries are 
  separated with a double semicolon ';;' and fields within an 
  entry are separated with a double colon '::' (examples in 
  following sections). This allows for easy splitting of list 
  entries and entry fields with most string libraries. If any 
  value needs to represent a double semicolon or double colon, it 
  should escape each of them with a backslash ('\;\;' or '\:\:'). 
  It is not expected that there will be a need to escape these 
  escape sequences and thus further escaping is not currently 
  defined.

The following sections describe where the information should be 
stored in specific tag formats.

2.1.1 MP3

MP3 values should be stored in a TXXX frame with the Description 
set to the specified identifier and the Text set to the string 
representation of the value. The Description should be in 
CamelCase as specified in the following sections, e.g. 
FMPS_Rating.

2.1.2 VorbisComments

Any file supporting VorbisComments (Vorbis, FLAC, Theora, Speex) 
should add a comment with the Key set to the specified identifier 
and the Value set to the string representation of the value. The 
Key should be in all upper-case, e.g. FMPS_RATING.

2.1.3 APEv2

Any file supporting APEv2 should add a comment with the Key set 
to the specified identifier and the Value set to the string 
representation of the value. The Key should be in all upper-case, 
e.g. FMPS_RATING.

2.1.4 MP4

MP4 values should be stored at ----:com.apple.iTunes:Identifier 
with the value a string representation of the tag's value. The 
Identifier should be in CamelCase as specified in the following 
sections, e.g. FMPS_Rating.

2.1.5 Windows Media

Windows Media values should be stored in the FMPS/Identifier 
namespace with the value a string representation of the tag's 
value. The Identifier should be in CamelCase as specified in the 
following sections, e.g. FMPS_Rating.

2.2 Rating Tags

Most media players support the notion of rating content, however 
standards for storing ratings in files do not exist. Some file 
metadata formats completely lack rating fields; others require 
personally identifiable information to be used as an identifier 
(such as a user's email address) or an organizational identifier 
(which reduces cross-player compatibility). The goal therefore is 
simple: to avoid any personally identifying information but to 
avoid tying the rating to a specific player.

Three types of ratings are currently defined: user ratings, 
critic ratings, and automatic (or algorithmic) ratings.

Although users are more naturally able to understand integer 
ratings, only advanced users will interact with these tags 
directly; otherwise they will be presented to the user via a 
conforming application. Meanwhile, there are tangible benefits to 
storing ratings as floating-point numbers, mainly due to the fact 
that the increased precision allows for a number of interesting 
and useful algorithmic rating schemes to be used. However, using 
both integer and floating-point values unnecessarily increases 
complexity of both this spec and application code. Therefore, 
both values are stored as floating-point numbers. Conversion to 
and from these and an integer scale presented to the user in an 
application is easily accomplished in the application's code if 
it is so desired.

Four tags are defined, corresponding to the three types of 
defined ratings, plus a canonical value: FMPS_Rating_User; 
FMPS_Rating_Critic; FMPS_Rating_Algorithm; and FMPS_Rating (the 
canonical value). A file that has no rating tag for a specific 
purpose is to be considered unrated for that purpose (user, 
critic or algorithm).

2.2.1 All Rating Tags

• Ratings are a float value between 0.0 and 1.0, inclusive. 0.0 
  is the lowest possible rating; 1.0 is the highest possible 
  rating.

• Ratings should only be rounded when necessary, in order to 
  increase cross-player compatibility.

2.2.2 FMPS_Rating

• The canonical rating value in FMPS_Rating should be set 
  whenever a user rates the track. This is in addition to any 
  value stored for that user in FMPS_Rating_User. This value is 
  canonical because if a player does not support multiple users 
  (or if no user identifier is set) this is the value that should 
  be returned.

• If a user removes ratings from a track in the media player's 
  database, the value of the FMPS_Rating tag should be cleared as 
  well.

2.2.3 FMPS_Rating_User

• If a player supports the notion of multiple users (perhaps from 
  discovery of the current user from the operating system) and 
  wishes to allow the users to keep separate ratings, it stores 
  these values in the FMPS_Rating_User tag.

• Applications supporting multiple user ratings should have a way 
  for users to define their preferred identifier. 

• The values are in the form of a list as defined in Section 2.1, 
  with list entries in the format of UserIdentifier::Value. There 
  may not be empty strings.

• Example: “Alice Abba::0.6;;Bob Beatles::0.8”.

2.3 FMPS_Rating_Critic

• The values are in the form of a list as defined in Section 2.1, 
  with list entries in the format of Publication::Critic::Rating. 
  If the critic is unaffiliated, or if the rating is by a 
  publication with no byline, the special value “FMPS_Nothing” 
  should be used to denote this; there may not be empty strings.

• Example: “Rolling Stone::Ralph 
  Gleason::0.83;;musicOMH.com::FMPS_Nothing::0.76;;Metacritic::FMPS_Nothing::0.8;;FMPS_Nothing::Some 
  Dude::0.9”

2.3.1 FMPS_Rating_Algorithm

• The values are in the form of a list as defined in Section 2.1, 
  with list entries in the format of 
  Application::Algorithm::Rating. All fields must be defined; no 
  fields may be left empty.

• In cases where the algorithm is intended to be 
  global/collaborative/cross-application, the Application value 
  should be set to some agreed-upon value. In other words, it is 
  suggested to use the application name for the Application part 
  of the identifier, but it may also be used to identify a “group”
   of algorithms, or some arbitrary other value that can be used 
  for identification.

• Example: “
  Amarok::AutoRate::0.52;;VLC::Standard::0.6;;QuodLibet::RatingPluginX::0.35;;The 
  Music Player Alliance::Rating Algorithm 1::0.5”

A note on the floating point values: some players may only allow 
users to rate in increments of whole numbers between 1 and 5; 
others 0 and 10; and so on. However, players should try to ensure 
that the rating they display and use for any purposes adheres to 
that saved in the tag when possible. For instance, if a track has 
a rating of 0.9 and an application only shows ratings using five 
star icons in full-star increments, this would be rounded within 
the application to five stars. However, the user may in fact have 
set the rating to 9/10 in another application. If the rating was 
being shown numerically, ideally the application would only round 
this number when absolutely necessary and display 4.5 instead of 
5, which would more accurately reflect the user's set rating.

2.4 Playcount Tags

As with ratings, there are multiple kinds of playcount tags (user 
and algorithmic) in addition to a canonical value. The user tag 
tracks how many times a song has been played for a user. The 
auto/algorithmic value can be used in an application-specific way 
to do interesting things; for instance, to cumulatively track 
exact percentages of tracks played, in order to display to the 
user the number of days/hous/minutes/seconds they have spent 
listening to a particular song. 

Three tags are defined, corresponding to the two types of defined 
playcounts, plus a canonical value: FMPS_Playcount_User; 
FMPS_Playcount_Algorithm; and FMPS_Playcount (the canonical 
value). A file that has no playcount tag for a specific purpose 
is to be considered unplayed for that purpose (user or 
algorithm).

2.4.1 User Playcount Criteria

The user playcount isn't meant to be set by the user, but rather 
to follow these rules that define user behavior. A file is to be 
considered “played” if it meets the following criteria, inspired 
by Last.fm's scrobbling rules:

• If the track is less than thirty seconds long, the entire song 
  must be played.

• If the track is more than thirty seconds long but less than 
  eight minutes long, at least fifty percent of the file must be 
  played, calculated via length of track. For instance, if a 
  track is one minute long, at least thirty seconds of the track 
  must have been played, although if the user skips backwards 
  multiple times and listens to the same ten seconds of the track 
  three times in a row, this may be considered a valid playcount.

• If the track is longer than eight minutes, at least four 
  minutes of the track must be played.

User playcounts are float values representing integers (1.0, 
141.0, etc.). They are never fractional values; a song was either 
played, or it wasn't.

2.4.2 All Playcount Tags

• Playcounts are a float value not less than 0.0. 0.0 is valid 
  and means unplayed.

• The maximum value is 0.000001 less than the largest value able 
  to be stored in a 32-bit unsigned integer: 
  4,294,967,294.999999. This is so that playcount values can be 
  rounded to an integer equivalent, if necessary.

2.4.3 FMPS_Playcount

• The canonical playcount value in FMPS_Playcount should be set 
  whenever a user plays a track. This is in addition to any value 
  stored for that user in FMPS_Playcount_User. This value is 
  canonical because if a player does not support multiple users 
  (or if no user identifier is set) this is the value that should 
  be returned.

• If a user has an identifier set to store per-user playcounts, 
  when this value is set it should be set to the value of that 
  user's playcount. In other words, the last value held in 
  FMPS_Playcount will be equivalent to the latest user's personal 
  playcount, if any.

• If a user resets the playcount for a track in the media 
  player's database, the value of the FMPS_Playcount tag should 
  be cleared as well.

• FMPS_Playcount stores “full plays” of a track according to the 
  rules in Section 2.3.1.

2.4.4 FMPS_Playcount_User

• If a player supports the notion of multiple users (perhaps from 
  discovery of the current user from the operating system) and 
  wishes to allow the users to keep separate playcounts, it 
  stores these values in the FMPS_Playcount_User tag.

• Applications supporting multiple user playcounts should have a 
  way for users to define their preferred identifier. 

• The values are in the form of a list as defined in Section 2.1, 
  with list entries in the format of UserIdentifier::Value. There 
  may not be empty strings.

• FMPS_Playcount_User stores “full plays” of a track according to 
  the rules in Section 1.3.1.

• Example: “Alice Abba::1.0;;Bob Beatles::133.0”.

2.4.5 FMPS_Playcount_Algorithm

• The values are in the form of a list as defined in Section 
  2.3.1, with list entries in the format of 
  Application::Algorithm::Playcount. All fields must be defined; 
  no fields may be empty.

• In cases where the algorithm is intended to be 
  global/collaborative/cross-application, the Application value 
  should be set to some agreed-upon value. In other words, it is 
  suggested to use the application name for the Application part 
  of the identifier, but it may also be used to identify a “group”
   of algorithms, or some arbitrary other value that can be used 
  for identification.

• For algorithms, a track's length should be considered to be 
  worth 1.0 playcounts; the user skipping parts of the track may 
  decrease the value below 1.0, and the user repeating parts of 
  the track may increase this value past 1.0.

• Example: “
  Amarok::AutoPlaycount::152.69;;VLC::Standard::198.0;;QuodLibet::RatingPluginX::1652.19;;The 
  Music Player Alliance::Rating Algorithm 1::0.5”

2.5 Performer Roles

Performer roles allow you to describe the performers in a track. 
Current support for these roles in tag formats is sporadic or 
difficult to parse. As many of these tags as desired can be 
specified, to include all relevant performer information.

• The identifier used is “FMPS_Performers. The value is a list in 
  the form of Performer::Role, where Role is the user-defined 
  role (“Guitar”, “Guitar (Backup)”, “Vocals”).

• Example: “Willy Nelson::Guitar;;Eric Clapton::Backup 
  Guitar;;B.B. King::Vocals”

2.6 Lyrics

Embedding lyrics into a file allows users to save custom lyrics 
and to still see the lyrics when not connected to the Internet. 
Since different users may wish to have different sets of lyrics 
(for example, if customizing lyrics against a music-only track) 
and different Internet sources may have different lyrics, it is 
possible to store multiple lyrics values by specifying a source.

• The identifier for the (canonical) lyrics text is “FMPS_Lyrics”
  . The value is a string. Spaces, tabs, and newlines should be 
  preserved when saving the string and displayed properly to the 
  user.

• Lyrics may also be stored in FMPS_Lyrics_Sources as a list (as 
  defined in Section 2.1) in the form of Source::Data.

2.7 Compilation Identifier

Compilations can be difficult for music players to discover. 
Sometimes the user places all files from a compilation in one 
directory and expects that the music player will understand this; 
sometimes the user has them in different directories but with the 
same album name and expects that the music player will understand 
this; and so on.

Although there are existing solutions to identify albums and 
songs that belong to the same album (such as MusicBrainz 
identifiers) many users have not or do not want to tag their 
songs with MusicBrainz information. This tag therefore provides a 
simple way for an application to assign a compilation identifier 
to a track, indicating to what compilation a track belongs.

This enables such use-cases as allowing a user to mark multiple 
tracks that are part of a single compilation, and then have those 
tracks show up as being together in a compilation the next time 
the user adds the tracks to the music player.

This section purposefully does not define information about the 
compilation; it is expected that the user must supply that 
information in appropriate existing tags, e.g. ALBUMARTIST for 
VorbisComments.

• The identifier for the compilation tag is FMPS_Compilations.

• Values are a list (as defined in Section 2.1) in the form of 
  Application::Identifier. It is valid for applications to have 
  more than one identifier, if the user wants to mark a track as 
  being present in multiple compilations. However, each list 
  entry must be unique.

• Example: “
  Amarok::2982ab29ef;;Banshee::ad8slpbzl229zier;;Amarok::My 
  Compilation”

