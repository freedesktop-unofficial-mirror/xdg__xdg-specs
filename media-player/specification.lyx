#LyX 1.6.4 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass docbook
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Free Media Player Specifications
\end_layout

\begin_layout Date
November 3rd, 2009
\end_layout

\begin_layout Author
Copyright 2009 by 
\begin_inset Flex Element:Firstname
status collapsed

\begin_layout Plain Layout
Jeff
\end_layout

\end_inset

 
\begin_inset Flex Element:Surname
status collapsed

\begin_layout Plain Layout
Mitchell
\end_layout

\end_inset


\end_layout

\begin_layout Author
To be released under an appropriate license when one is selected
\end_layout

\begin_layout Abstract
This specification describes various metadata and behavioral items intended
 to reduce complexity and enhance functionality for users of free music
 and media players.
 It does this by proposing standards for common functionality needs where
 none currently exist, and doing so in a way that is easily adoptable cross-play
er and cross-format, when applicable.
\end_layout

\begin_layout Section
Metadata Tags
\end_layout

\begin_layout Standard
The metadata tag ideas evolved from Quod Libet's VorbisComments suggestions
 at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://code.google.com/p/quodlibet/wiki/Specs_VorbisComments
\end_layout

\end_inset

, however this attempts to not only address ambiguities and incompatibilities
 with the specification at that URL, but also to define how this functionality
 should be applied cross-format.
 It is intended that as usable ways of inserting the metadata described
 become available for formats not currently specified, that this document
 will be updated to meet those needs.
\end_layout

\begin_layout Standard
All newly-specified tags carry an identifier 
\begin_inset Quotes eld
\end_inset

FMPS_
\begin_inset Quotes erd
\end_inset

 to tie the tags to this specification.
 The reason is simple.
 Since the official metadata specifications either fail to define or define
 unusable tags, these value are only official to the extent that this specificat
ion is adopted.
 Without an identifier to give context to the meanings and limitations of
 the values, there is a real possibility that a noncompliant media player
 will use the same tag names in an incompatible fashion, whether intentionally
 or not, and there is no way to determine whether a seemingly compatible
 use of the tags by a noncompliant player actually results in user-intended
 behavior.
 As these identifiers are read and modified only by players and advanced
 users, it is not expected to be a hindrance to adoption or to cause undue
 burden on either.
\end_layout

\begin_layout Subsection
Song Rating Tags
\end_layout

\begin_layout Standard
Most media players support the notion of rating content, however standards
 for storing ratings in files do not exist.
 Some file metadata formats completely lack rating fields; others require
 personal information to be used as an identifier (such as a user's email
 address) or an organizational identifier (which reduces cross-player compatibil
ity).
 The goal therefore is simple: to avoid any personal identifying information
 but avoid tying the rating to a specific player.
\end_layout

\begin_layout Standard
Two types of ratings are defined: user ratings, and automatic (or algorithmic)
 ratings.
\end_layout

\begin_layout Standard
Although users are more naturally able to understand integer ratings, only
 advanced users will interact with these tags directly; otherwise they will
 be presented to the user via a conforming application.
 Meanwhile, there are tangible benefits to storing ratings as floating-point
 numbers, mainly due to the fact that the increased precision allows for
 a number of interesting and useful algorithmic rating schemes to be used.
 However, using both integer and floating-point values unnecessarily increases
 complexity of both this spec and application code.
 Therefore, both values are stored as floating-point numbers.
 Conversion to and from these and an integer scale presented to the user
 in an application is easily accomplished in the application's code if it
 is so desired.
\end_layout

\begin_layout Standard
If both tags exist when a file is being imported or read into a player's
 library, the user rating takes precedence, meaning that if only a single
 value is being shown to the user it should be the user-defined value.
\end_layout

\begin_layout Standard
For all tag formats, the following is defined:
\end_layout

\begin_layout Itemize
All identifers and values are strings in UTF-8 encoding.
\end_layout

\begin_layout Itemize
A file that has no such tag is to be considered unrated for that purpose
 (user or algorithm).
\end_layout

\begin_layout Itemize
If a user removes ratings from a track in the media player, the user rating
 tag should be removed as well.
 The algorithmic rating tag does not have to be removed in this instance.
\end_layout

\begin_layout Itemize
The identifier for the user rating is 
\begin_inset Quotes eld
\end_inset

FMPS_UserRating
\begin_inset Quotes erd
\end_inset

.
 The identifier for the algorithmic rating is 
\begin_inset Quotes eld
\end_inset

FMPS_AutoRating
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Ratings are a float value between 0.0 and 1.0, inclusive.
 0.0 is the lowest possible rating; 1.0 is the highest possible rating.
\end_layout

\begin_layout Itemize
A period/full stop is used to separate the digits from the fractional part
 of the float.
\end_layout

\begin_layout Itemize
Float values should be limited to six decimal places.
\end_layout

\begin_layout Itemize
Ratings should only be rounded when necessary, in order to increase cross-player
 compatibility.
\end_layout

\begin_layout Standard
A note on that last point: some players may only allow users to rate in
 increments of whole numbers between 1 and 5; others 0 and 10; and so on.
 However, players should try to ensure that the rating they display and
 use for any purposes adheres to that saved in the tag when possible.
 For instance, if a track has a rating of 0.9 and an application only shows
 ratings using five star icons in full-star increments, this would be rounded
 within the application to five stars.
 However, the user may in fact have set the rating to 9/10 in another applicatio
n.
 If the rating was being shown numerically, ideally the application would
 only round this number when absolutely necessary and display 4.5 instead
 of 5, which would more accurately reflect the user's set rating.
\end_layout

\begin_layout Subsubsection
MP3
\end_layout

\begin_layout Standard
MP3 ratings should be stored in a TXXX frame with the Description set to
 the specified identifier and the Text set to the string value of the float
 rating.
\end_layout

\begin_layout Subsubsection
VorbisComments
\end_layout

\begin_layout Standard
Any file supporting VorbisComments (Vorbis, FLAC, Theora, Speex) should
 use the specified identifier as the Key and the string value of the float
 rating as the Value.
\end_layout

\begin_layout Subsection
Playcount Tags
\end_layout

\begin_layout Standard
As with ratings, there are both user and automatic playcount tags.
 The user tag is intended to be used in the normal sense, tracking how many
 times a song has been played, which is defined below.
 The auto/algorithmic value can be used in an application-specific way to
 do interesting things; for instance, to cumulatively track exact percentages
 of tracks played, in order to display to the user the number of days/hous/minut
es/seconds they have spent listening to a particular song.
 
\end_layout

\begin_layout Standard
As with ratings, if both tags exist when a file is being imported or read
 into a player's library, the user playcount takes precedence for display.
\end_layout

\begin_layout Standard
For all tag formats, the following is defined:
\end_layout

\begin_layout Itemize
All identifers and values are strings in UTF-8 encoding.
\end_layout

\begin_layout Itemize
A file that has no such tag is to be considered unplayed for that purpose
 (user or algorithm).
 Removing playcount information from a track in the media player should
 cause the user playcount tag to be removed as well.
 The algorithmic playcount tag does not have to be removed in this instance.
\end_layout

\begin_layout Itemize
The identifier for the integer rating is 
\begin_inset Quotes eld
\end_inset

FMPS_UserPlaycount
\begin_inset Quotes erd
\end_inset

.
 The identifier for the float rating is 
\begin_inset Quotes eld
\end_inset

FMPS_AutoPlaycount
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Playcounts are a float value with a minimum of 0 (or 0.0), where 0 is an
 acceptable value but indicates that a track has not been played (the same
 as if the track had no float playcount tag).
 Integer values are acceptable, i.e.
 it is not a requirement that the value contains a full stop/period.
\end_layout

\begin_layout Itemize
For the user playcount, playing a track (subject to the criteria below)
 increases the user playcount value by 1.0.
 For the algorithmic playcount, a track's length should be considered to
 be worth 1.0; the user skipping parts of the track may decrease the value
 below 1.0, and the user repeating parts of the track may increase this value
 past 1.0.
\end_layout

\begin_layout Itemize
A period/full stop is used to separate the digits and fractional portions
 of the float.
\end_layout

\begin_layout Itemize
Float values should be limited to six decimal places.
\end_layout

\begin_layout Itemize
The maximum value is 0.000001 less than the largest value able to be stored
 in a 32-bit unsigned integer: 4,294,967,294.999999.
 This is so that the float playcount value can be rounded to an integer
 equivalent, if necessary.
\end_layout

\begin_layout Standard
For the user playcount, a file is to be considered 
\begin_inset Quotes eld
\end_inset

played
\begin_inset Quotes erd
\end_inset

 if it meets the following criteria, inspired by Last.fm's scrobbling rules:
\end_layout

\begin_layout Itemize
If the track is less than 30 seconds long, the entire song must be played.
\end_layout

\begin_layout Itemize
If the track is more than 30 seconds long, at least fifty percent of the
 file must be played, calculated via length of track.
 For instance, if a track is one minute long, at least thirty seconds of
 the track must have been played, although if the user skips backwards multiple
 times and listens to the same ten seconds of the track three times in a
 row, this may be considered a valid playcount.
\end_layout

\begin_layout Subsubsection
MP3
\end_layout

\begin_layout Standard
MP3 playcounts should be stored in a TXXX frame with the Description set
 to the specified identifier and the Text set to the string value of the
 integer playcount.
\end_layout

\begin_layout Subsubsection
VorbisComments
\end_layout

\begin_layout Standard
Any file supporting VorbisComments (Vorbis, FLAC, Theora, Speex) should
 use the specified identifier as the Key and the string value of the float
 playcount as the Value.
\end_layout

\begin_layout Subsection
Performer Roles
\end_layout

\begin_layout Standard
Performer roles allow you to describe the performers in a track.
 Current support for these roles in tag formats is sporadic or difficult
 to parse.
 As many of these tags as desired can be specified, to include all relevant
 performer information.
\end_layout

\begin_layout Standard
For all tag formats, the following is defined:
\end_layout

\begin_layout Itemize
All identifiers and values are of strings in UTF-8 encoding.
\end_layout

\begin_layout Itemize
The identifier used is 
\begin_inset Quotes eld
\end_inset

FMPS_Performer:X
\begin_inset Quotes erd
\end_inset

, where X is the user-defined role (
\begin_inset Quotes eld
\end_inset

Guitar
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Guitar (Backup)
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Vocals
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Itemize
The value of each identifier is the role performer's name.
\end_layout

\begin_layout Subsubsection
MP3
\end_layout

\begin_layout Standard
MP3 performer role information should be stored in a TXXX frame with the
 Description set to the specified identifier/role and the Text set to the
 role performer.
\end_layout

\begin_layout Subsubsection
VorbisComments
\end_layout

\begin_layout Standard
Any file supporting VorbisComments (Vorbis, FLAC, Theora, Speex) should
 use the specified identifier/role as the Key and the role performer as
 the Value.
\end_layout

\begin_layout Section
Filesystem Directives
\end_layout

\begin_layout Standard
Common functionality for many media players is the notion of a library or
 collection as a store of media objects that can be played.
 Generally, users specify or drag-n-drop directories or files that they
 wish to have added to this store.
 These subsections contain files that can be present on a user's filesystem
 to allow for more fine-grained control over import.
\end_layout

\begin_layout Subsection
Ignore Directive
\end_layout

\begin_layout Standard
When a directory is being parsed, it should first be checked for a file
 with the name 
\begin_inset Quotes eld
\end_inset

fmps_ignore
\begin_inset Quotes erd
\end_inset

.
 If present, the parser should ignore that directory's files.
\end_layout

\end_body
\end_document
