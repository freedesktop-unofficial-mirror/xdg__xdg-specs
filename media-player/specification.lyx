#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass docbook
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 0
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Free Media Player Specifications
\end_layout

\begin_layout Title
Tag Specification
\end_layout

\begin_layout Date
January 25th, 2010
\end_layout

\begin_layout Author
Copyright 2009-2010 by 
\begin_inset Flex Element:Firstname
status collapsed

\begin_layout Plain Layout
Jeff
\end_layout

\end_inset

 
\begin_inset Flex Element:Surname
status collapsed

\begin_layout Plain Layout
Mitchell
\end_layout

\end_inset


\end_layout

\begin_layout Author
To be released under an appropriate license when one is selected
\end_layout

\begin_layout Abstract
This specification describes various audio file tag metadata intended to
 increase interoperability between free music players for things such as
 ratings, playcounts, performer roles, and more.
 It does this by proposing standards for common functionality needs where
 none currently exist, and doing so in a way that is easily adoptable cross-play
er and cross-format.
 It is designed to be robust against future needs and to prevent possible
 conflicts with other tag identifiers and values.
\end_layout

\begin_layout Section
Metadata Tags
\end_layout

\begin_layout Standard
The metadata tag formats evolved from Quod Libet's VorbisComments suggestions
 at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://code.google.com/p/quodlibet/wiki/Specs_VorbisComments
\end_layout

\end_inset

, however this attempts to not only address ambiguities and incompatibilities
 with the specification at that URL, but also to define how this functionality
 should be applied across formats.
 It is intended that as usable ways of inserting the metadata described
 become available for formats not currently specified, that this document
 will be updated to meet those needs.
\end_layout

\begin_layout Standard
All newly-specified tags carry an identifier 
\begin_inset Quotes eld
\end_inset

FMPS_
\begin_inset Quotes erd
\end_inset

 to tie the tags to this specification.
 The reason is simple: since the official metadata specifications either
 fail to define or define unusable tags, these values are only official
 to the extent that this specification is adopted.
 Without an identifier to give context to the meanings and limitations of
 the values, there is a real possibility that a noncompliant media player
 will use the same tag names in an incompatible fashion, whether intentionally
 or not, and there is no way to determine whether a seemingly compatible
 use of the tags by a noncompliant player actually results in user-intended
 behavior.
 The 
\begin_inset Quotes eld
\end_inset

FMPS_
\begin_inset Quotes erd
\end_inset

 identifier and this specification document is therefore used in a similar
 fashion to XML schema declarations.
\end_layout

\begin_layout Standard
As these identifiers are read and modified only by players and advanced
 users, it is not expected to be a hindrance to adoption or to cause undue
 burden on either.
\end_layout

\begin_layout Subsection
Common Data and Tag Information
\end_layout

\begin_layout Standard
This section provides 
\begin_inset Quotes eld
\end_inset

up-front
\begin_inset Quotes erd
\end_inset

 information that is pertinent to all tags described below, such as what
 encoding to use and which tags to use in various formats.
\end_layout

\begin_layout Standard
For all tag formats, the following is defined:
\end_layout

\begin_layout Itemize
All identifers may consist of ASCII 0x20 through 0x7D, 0x3D ('=') excluded.
 All values are strings in UTF-8 encoding.
 To keep the specification simple, no ranges of control characters are defined
 which should never be included in a string.
 It is assumed that the used string-handling library will properly handle
 any such characters encountered.
 It is highly recommended, however, that no such control characters are
 used.
\end_layout

\begin_layout Itemize
Although identifier case is specified for the different types of tags, compariso
ns against identifier strings MUST be case-insensitive.
\end_layout

\begin_layout Itemize
A period/full stop is used to separate the digits in a float value from
 the fractional part of the float.
 All float values MUST include a period/full stop (1 is not acceptable;
 1.0 is correct).
\end_layout

\begin_layout Itemize
Float values should be limited to six decimal places.
\end_layout

\begin_layout Itemize
For any lists, entries are separated with a double semicolon ';;' and fields
 within an entry are separated with a double colon '::' (examples in following
 sections).
 This allows for easy splitting of list entries and entry fields with most
 string libraries.
 If any value needs to represent a double semicolon or double colon, it
 should escape each of them with a backslash ('
\backslash
;
\backslash
;' or '
\backslash
:
\backslash
:').
 It is not expected that there will be a need to escape these particular
 sequences of characters and thus further escaping is not currently defined.
\end_layout

\begin_layout Standard
The following sections describe where the information should be stored in
 specific tag formats.
\end_layout

\begin_layout Subsubsection
MP3
\end_layout

\begin_layout Standard
MP3 values should be stored in a TXXX frame with the Description set to
 the specified identifier and the Text set to the string representation
 of the value.
 The Description should be in CamelCase as specified in the following sections,
 e.g.
 FMPS_Rating.
\end_layout

\begin_layout Subsubsection
VorbisComments
\end_layout

\begin_layout Standard
Any file supporting VorbisComments (Vorbis, FLAC, Theora, Speex) should
 add a comment with the Key set to the specified identifier and the Value
 set to the string representation of the value.
 The Key should be in all upper-case, e.g.
 FMPS_RATING.
\end_layout

\begin_layout Subsubsection
APEv2
\end_layout

\begin_layout Standard
Any file supporting APEv2 should add a comment with the Key set to the specified
 identifier and the Value set to the string representation of the value.
 The Key should be in all upper-case, e.g.
 FMPS_RATING.
\end_layout

\begin_layout Subsubsection
MP4
\end_layout

\begin_layout Standard
MP4 values should be stored at ----:com.apple.iTunes:Identifier with the value
 a string representation of the tag's value.
 The Identifier should be in CamelCase as specified in the following sections,
 e.g.
 FMPS_Rating.
\end_layout

\begin_layout Subsubsection
Windows Media
\end_layout

\begin_layout Standard
Windows Media values should be stored in the FMPS/Identifier namespace with
 the value a string representation of the tag's value.
 The Identifier should be in CamelCase as specified in the following sections,
 e.g.
 FMPS_Rating.
\end_layout

\begin_layout Subsection
Song Rating Tags
\end_layout

\begin_layout Standard
Most media players support the notion of rating content, however standards
 for storing ratings in files do not exist.
 Some file metadata formats completely lack rating fields; others require
 personally identifiable information to be used as an identifier (such as
 a user's email address) or an organizational identifier (which reduces
 cross-player compatibility).
 The goal therefore is simple: to avoid any personally identifying information
 but to avoid tying the rating to a specific player.
\end_layout

\begin_layout Standard
Three types of ratings are currently defined: user ratings, critic ratings,
 and automatic (or algorithmic) ratings.
\end_layout

\begin_layout Standard
Although users are more naturally able to understand integer ratings, only
 advanced users will interact with these tags directly; otherwise they will
 be presented to the user via a conforming application.
 Meanwhile, there are tangible benefits to storing ratings as floating-point
 numbers, mainly due to the fact that the increased precision allows for
 a number of interesting and useful algorithmic rating schemes to be used.
 However, using both integer and floating-point values unnecessarily increases
 complexity of both this spec and application code.
 Therefore, both values are stored as floating-point numbers.
 Conversion to and from these and an integer scale presented to the user
 in an application is easily accomplished in the application's code if it
 is so desired.
\end_layout

\begin_layout Standard
Four tags are defined, corresponding to the three types of defined ratings,
 plus a canonical value: FMPS_Rating_User; FMPS_Rating_Critic; FMPS_Rating_Algor
ithm; and FMPS_Rating (the canonical value).
 A file that has no rating tag for a specific purpose is to be considered
 unrated for that purpose (user, critic or algorithm).
\end_layout

\begin_layout Standard
All tags:
\end_layout

\begin_layout Itemize
Ratings are a float value between 0.0 and 1.0, inclusive.
 0.0 is the lowest possible rating; 1.0 is the highest possible rating.
\end_layout

\begin_layout Itemize
Ratings should only be rounded when necessary, in order to increase cross-player
 compatibility.
\end_layout

\begin_layout Standard
FMPS_Rating:
\end_layout

\begin_layout Itemize
The canonical rating value in FMPS_Rating should be set whenever a user
 rates the track.
 This is in addition to any value stored for that user in FMPS_Rating_User.
 This value is canonical because if a player does not support multiple users
 (or if no user identifier is set) this is the value that should be returned.
\end_layout

\begin_layout Itemize
If a user removes ratings from a track in the media player's database, the
 value of the FMPS_Rating tag should be cleared as well.
\end_layout

\begin_layout Standard
FMPS_Rating_User:
\end_layout

\begin_layout Itemize
If a player supports the notion of multiple users (perhaps from discovery
 of the current user from the operating system) and wishes to allow the
 users to keep separate ratings, it stores these values in the FMPS_Rating_User
 tag.
\end_layout

\begin_layout Itemize
Applications supporting multiple user ratings should have a way for users
 to define their preferred identifier.
 
\end_layout

\begin_layout Itemize
The values are in the form of a list as defined in the first section, with
 list entries in the format of UserIdentifier::Value.
 There may not be empty strings.
\end_layout

\begin_layout Itemize
Example: 
\begin_inset Quotes eld
\end_inset

Alice Abba::0.6;;Bob Beatles::0.8
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
FMPS_Rating_Critic:
\end_layout

\begin_layout Itemize
The values are in the form of a list as defined in the first section, with
 list entries in the format of Publication::Critic::Rating.
 If the critic is unaffiliated, or if the rating is by a publication with
 no byline, the special value 
\begin_inset Quotes eld
\end_inset

FMPS_Nothing
\begin_inset Quotes erd
\end_inset

 should be used to denote this; there may not be empty strings.
\end_layout

\begin_layout Itemize
Example: 
\begin_inset Quotes eld
\end_inset

Rolling Stone::Ralph Gleason::0.83;;musicOMH.com::FMPS_Nothing::0.76;;Metacritic::F
MPS_Nothing::0.8;;FMPS_Nothing::Some Dude::0.9
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
FMPS_Rating_Algorithm:
\end_layout

\begin_layout Itemize
The values are in the form of a list as defined in the first section, with
 list entries in the format of Application::Algorithm::Rating.
 All fields must be defined; 
\end_layout

\begin_layout Itemize
For algorithms intended to be global/collaborative/cross-application, the
 Application value may be FMPS_Nothing.
 However, it is strongly suggested that in this case the Application is
 set to some agreed-upon value.
 In other words, it is suggested to use the application name for the Application
 part of the identifier, but it may also be used to identify a 
\begin_inset Quotes eld
\end_inset

group
\begin_inset Quotes erd
\end_inset

 of algorithms, or some arbitrary other value that can be used for identificatio
n.
\end_layout

\begin_layout Itemize
Example: 
\begin_inset Quotes eld
\end_inset

Amarok::AutoRate::0.52;;VLC::Standard::0.6;;QuodLibet::RatingPluginX::0.35;;The
 Music Player Alliance::Rating Algorithm 1::0.5
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
A note on the floating point values: some players may only allow users to
 rate in increments of whole numbers between 1 and 5; others 0 and 10; and
 so on.
 However, players should try to ensure that the rating they display and
 use for any purposes adheres to that saved in the tag when possible.
 For instance, if a track has a rating of 0.9 and an application only shows
 ratings using five star icons in full-star increments, this would be rounded
 within the application to five stars.
 However, the user may in fact have set the rating to 9/10 in another applicatio
n.
 If the rating was being shown numerically, ideally the application would
 only round this number when absolutely necessary and display 4.5 instead
 of 5, which would more accurately reflect the user's set rating.
\end_layout

\begin_layout Subsection
Playcount Tags
\end_layout

\begin_layout Standard
As with ratings, there are multiple kinds of playcount tags: user and algorithmi
c.
 The user tag is canonical and intended to be used in the normal sense,
 tracking how many times a song has been played (as defined below).
 The auto/algorithmic value can be used in an application-specific way to
 do interesting things; for instance, to cumulatively track exact percentages
 of tracks played, in order to display to the user the number of days/hous/minut
es/seconds they have spent listening to a particular song.
 
\end_layout

\begin_layout Standard
Three tags are defined, corresponding to the two types of defined ratings,
 plus a canonical value: FMPS_Playcount_User; FMPS_Playcount_Algorithm;
 and FMPS_Playcount (the canonical value).
 A file that has no playcount tag for a specific purpose is to be considered
 unplayed for that purpose (user or algorithm).
\end_layout

\begin_layout Standard
For all tags:
\end_layout

\begin_layout Itemize
A file that has no such tag is to be considered unplayed for that purpose
 (user or algorithm).
 Removing playcount information from a track in the media player should
 cause the user playcount tag to be removed as well.
 The algorithmic playcount tag does not have to be removed in this instance.
\end_layout

\begin_layout Itemize
The identifier for the (canonical) user playcount is 
\begin_inset Quotes eld
\end_inset

FMPS_Playcount
\begin_inset Quotes erd
\end_inset

.
 This should be incremented every time a user plays the track, regardless
 of whether they are also using user-specific playcounts as described below.
\end_layout

\begin_layout Itemize
If a player supports the notion of multiple users (perhaps from discovery
 of the current user from the operating system) and wishes to allow the
 users to keep separate playcounts, the identifier should be in the form
 
\begin_inset Quotes eld
\end_inset

FMPS_Playcount_User_X
\begin_inset Quotes erd
\end_inset

 where X is a user-defined value.
 Any spaces in the username should be converted to = signs, e.g.
 
\begin_inset Quotes eld
\end_inset

FMPS_Playcount_User_Jeff=Mitchell
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
The identifier for an algorithmic rating is 
\begin_inset Quotes eld
\end_inset

FMPS_Playcount_Algorithm_X
\begin_inset Quotes erd
\end_inset

 where X names an arbitrary algorithm name.
\end_layout

\begin_layout Itemize
Playcounts are a float value with a minimum of 0.0, where 0.0 is an acceptable
 value but indicates that a track has not been played (the same as if the
 track had no playcount tag).
 Playcounts (especially the user playcount) can be shown to the user as
 integers but must always be stored as a float.
\end_layout

\begin_layout Itemize
For the user playcount, playing a track (subject to the criteria below)
 increases the user playcount value by 1.0.
 For the algorithmic playcount, a track's length should be considered to
 be worth 1.0; the user skipping parts of the track may decrease the value
 below 1.0, and the user repeating parts of the track may increase this value
 past 1.0.
\end_layout

\begin_layout Itemize
The maximum value is 0.000001 less than the largest value able to be stored
 in a 32-bit unsigned integer: 4,294,967,294.999999.
 This is so that the float playcount value can be rounded to an integer
 equivalent, if necessary.
\end_layout

\begin_layout Standard
The user playcount isn't meant to be set by the user, but rather to follow
 these rules that define user behavior.
 A file is to be considered 
\begin_inset Quotes eld
\end_inset

played
\begin_inset Quotes erd
\end_inset

 if it meets the following criteria, inspired by Last.fm's scrobbling rules:
\end_layout

\begin_layout Itemize
If the track is less than 30 seconds long, the entire song must be played.
\end_layout

\begin_layout Itemize
If the track is more than 30 seconds long, at least fifty percent of the
 file must be played, calculated via length of track.
 For instance, if a track is one minute long, at least thirty seconds of
 the track must have been played, although if the user skips backwards multiple
 times and listens to the same ten seconds of the track three times in a
 row, this may be considered a valid playcount.
\end_layout

\begin_layout Subsection
Performer Roles
\end_layout

\begin_layout Standard
Performer roles allow you to describe the performers in a track.
 Current support for these roles in tag formats is sporadic or difficult
 to parse.
 As many of these tags as desired can be specified, to include all relevant
 performer information.
\end_layout

\begin_layout Standard
For all tag formats, the following is defined:
\end_layout

\begin_layout Itemize
The identifier used is 
\begin_inset Quotes eld
\end_inset

FMPS_Performer:X
\begin_inset Quotes erd
\end_inset

, where X is the user-defined role (
\begin_inset Quotes eld
\end_inset

Guitar
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Guitar (Backup)
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Vocals
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Itemize
The value of each identifier is the role performer's name.
\end_layout

\begin_layout Subsection
Lyrics
\end_layout

\begin_layout Standard
Embedding lyrics into a file allows users to save custom lyrics and to still
 see the lyrics when not connected to the Internet.
 Since different users may wish to have different sets of lyrics (for example,
 if customizing lyrics against a music-only track) and different Internet
 sources may have different lyrics, it is possible to store multiple lyrics
 values by specifying a source.
\end_layout

\begin_layout Standard
For all tag formats, the following is defined:
\end_layout

\begin_layout Itemize
The identifier for the (canonical) lyrics text is 
\begin_inset Quotes eld
\end_inset

FMPS_Lyrics
\begin_inset Quotes erd
\end_inset

.
 The data must be a UTF-8 string of arbitrary length.
 Spaces, tabs, and newlines should be preserved when saving the string and
 displayed properly to the user.
\end_layout

\begin_layout Itemize
Lyrics identifiers may contain information as to the source: 
\begin_inset Quotes eld
\end_inset

FMPS_Lyrics_From_X
\begin_inset Quotes erd
\end_inset

 where X names either a publication/site (
\begin_inset Quotes eld
\end_inset

Lyrics_Magazine
\begin_inset Quotes erd
\end_inset

) or a person in Firstname=Lastname format (
\begin_inset Quotes eld
\end_inset

Jeff=Mitchell
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Section
Examples
\end_layout

\end_body
\end_document
