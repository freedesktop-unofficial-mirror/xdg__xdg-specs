<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<!-- XML file was created by LyX 1.6.4
  See http://www.lyx.org/ for more information -->
<article lang="en_US">
<articleinfo>
<title>Free Media Player Specifications</title>
<date>November 3rd, 2009</date><author>
Copyright 2009 by <firstname>Jeff</firstname> <surname>Mitchell</surname>To be released under an appropriate license when one is selected</author><abstract>
<para>This specification describes various metadata and behavioral items intended to reduce complexity and enhance functionality for users of free music and media players. It does this by proposing standards for common functionality needs where none currently exist, and doing so in a way that is easily adoptable cross-player and cross-format, when applicable.</para>
</abstract></articleinfo><sect1>
<title>Metadata Tags</title>
<para>The metadata tag ideas evolved from Quod Libet's VorbisComments suggestions at <url>http://code.google.com/p/quodlibet/wiki/Specs_VorbisComments</url>, however this attempts to not only address ambiguities and incompatibilities with the specification at that URL, but also to define how this functionality should be applied cross-format. It is intended that as usable ways of inserting the metadata described become available for formats not currently specified, that this document will be updated to meet those needs.</para>
<para>All newly-specified tags carry an identifier &ldquo;FMPS_&rdquo; to tie the tags to this specification. The reason is simple. Since the official metadata specifications either fail to define or define unusable tags, these value are only official to the extent that this specification is adopted. Without an identifier to give context to the meanings and limitations of the values, there is a real possibility that a noncompliant media player will use the same tag names in an incompatible fashion, whether intentionally or not, and there is no way to determine whether a seemingly compatible use of the tags by a noncompliant player actually results in user-intended behavior. As these identifiers are read and modified only by players and advanced users, it is not expected to be a hindrance to adoption or to cause undue burden on either.</para><sect2>
<title>Song Rating Tags</title>
<para>Most media players support the notion of rating content, however standards for storing ratings in files do not exist. Some file metadata formats completely lack rating fields; others require personal information to be used as an identifier (such as a user's email address) or an organizational identifier (which reduces cross-player compatibility). The goal therefore is simple: to avoid any personal identifying information but avoid tying the rating to a specific player.</para>
<para>Two types of ratings are defined: user ratings, and automatic (or algorithmic) ratings.</para>
<para>Although users are more naturally able to understand integer ratings, only advanced users will interact with these tags directly; otherwise they will be presented to the user via a conforming application. Meanwhile, there are tangible benefits to storing ratings as floating-point numbers, mainly due to the fact that the increased precision allows for a number of interesting and useful algorithmic rating schemes to be used. However, using both integer and floating-point values unnecessarily increases complexity of both this spec and application code. Therefore, both values are stored as floating-point numbers. Conversion to and from these and an integer scale presented to the user in an application is easily accomplished in the application's code if it is so desired.</para>
<para>If both tags exist when a file is being imported or read into a player's library, the user rating takes precedence, meaning that if only a single value is being shown to the user it should be the user-defined value.</para>
<para>For all tag formats, the following is defined:</para><itemizedlist>
<listitem><para>All identifers and values are strings in UTF-8 encoding.</para></listitem><listitem><para>A file that has no such tag is to be considered unrated for that purpose (user or algorithm).</para></listitem><listitem><para>If a user removes ratings from a track in the media player, the user rating tag should be removed as well. The algorithmic rating tag does not have to be removed in this instance.</para></listitem><listitem><para>The identifier for the user rating is &ldquo;FMPS_UserRating&rdquo;. The identifier for the algorithmic rating is &ldquo;FMPS_AutoRating&rdquo;.</para></listitem><listitem><para>Ratings are a float value between 0.0 and 1.0, inclusive. 0.0 is the lowest possible rating; 1.0 is the highest possible rating.</para></listitem><listitem><para>A period/full stop is used to separate the digits from the fractional part of the float.</para></listitem><listitem><para>Float values should be limited to six decimal places.</para></listitem><listitem><para>Ratings should only be rounded when necessary, in order to increase cross-player compatibility.</para></listitem></itemizedlist><para>A note on that last point: some players may only allow users to rate in increments of whole numbers between 1 and 5; others 0 and 10; and so on. However, players should try to ensure that the rating they display and use for any purposes adheres to that saved in the tag when possible. For instance, if a track has a rating of 0.9 and an application only shows ratings using five star icons in full-star increments, this would be rounded within the application to five stars. However, the user may in fact have set the rating to 9/10 in another application. If the rating was being shown numerically, ideally the application would only round this number when absolutely necessary and display 4.5 instead of 5, which would more accurately reflect the user's set rating.</para><sect3>
<title>MP3</title>
<para>MP3 ratings should be stored in a TXXX frame with the Description set to the specified identifier and the Text set to the string value of the float rating.</para></sect3><sect3>
<title>VorbisComments</title>
<para>Any file supporting VorbisComments (Vorbis, FLAC, Theora, Speex) should use the specified identifier as the Key and the string value of the float rating as the Value.</para></sect3></sect2><sect2>
<title>Playcount Tags</title>
<para>As with ratings, there are both user and automatic playcount tags. The user tag is intended to be used in the normal sense, tracking how many times a song has been played, which is defined below. The auto/algorithmic value can be used in an application-specific way to do interesting things; for instance, to cumulatively track exact percentages of tracks played, in order to display to the user the number of days/hous/minutes/seconds they have spent listening to a particular song. </para>
<para>As with ratings, if both tags exist when a file is being imported or read into a player's library, the user playcount takes precedence for display.</para>
<para>For all tag formats, the following is defined:</para><itemizedlist>
<listitem><para>All identifers and values are strings in UTF-8 encoding.</para></listitem><listitem><para>A file that has no such tag is to be considered unplayed for that purpose (user or algorithm). Removing playcount information from a track in the media player should cause the user playcount tag to be removed as well. The algorithmic playcount tag does not have to be removed in this instance.</para></listitem><listitem><para>The identifier for the integer rating is &ldquo;FMPS_UserPlaycount&rdquo;. The identifier for the float rating is &ldquo;FMPS_AutoPlaycount&rdquo;.</para></listitem><listitem><para>Playcounts are a float value with a minimum of 0 (or 0.0), where 0 is an acceptable value but indicates that a track has not been played (the same as if the track had no float playcount tag). Integer values are acceptable, i.e. it is not a requirement that the value contains a full stop/period.</para></listitem><listitem><para>For the user playcount, playing a track (subject to the criteria below) increases the user playcount value by 1.0. For the algorithmic playcount, a track's length should be considered to be worth 1.0; the user skipping parts of the track may decrease the value below 1.0, and the user repeating parts of the track may increase this value past 1.0.</para></listitem><listitem><para>A period/full stop is used to separate the digits and fractional portions of the float.</para></listitem><listitem><para>Float values should be limited to six decimal places.</para></listitem><listitem><para>The maximum value is 0.000001 less than the largest value able to be stored in a 32-bit unsigned integer: 4,294,967,294.999999. This is so that the float playcount value can be rounded to an integer equivalent, if necessary.</para></listitem></itemizedlist><para>For the user playcount, a file is to be considered &ldquo;played&rdquo; if it meets the following criteria, inspired by Last.fm's scrobbling rules:</para><itemizedlist>
<listitem><para>If the track is less than 30 seconds long, the entire song must be played.</para></listitem><listitem><para>If the track is more than 30 seconds long, at least fifty percent of the file must be played, calculated via length of track. For instance, if a track is one minute long, at least thirty seconds of the track must have been played, although if the user skips backwards multiple times and listens to the same ten seconds of the track three times in a row, this may be considered a valid playcount.</para></listitem></itemizedlist><sect3>
<title>MP3</title>
<para>MP3 playcounts should be stored in a TXXX frame with the Description set to the specified identifier and the Text set to the string value of the integer playcount.</para></sect3><sect3>
<title>VorbisComments</title>
<para>Any file supporting VorbisComments (Vorbis, FLAC, Theora, Speex) should use the specified identifier as the Key and the string value of the float playcount as the Value.</para></sect3></sect2><sect2>
<title>Performer Roles</title>
<para>Performer roles allow you to describe the performers in a track. Current support for these roles in tag formats is sporadic or difficult to parse. As many of these tags as desired can be specified, to include all relevant performer information.</para>
<para>For all tag formats, the following is defined:</para><itemizedlist>
<listitem><para>All identifiers and values are of strings in UTF-8 encoding.</para></listitem><listitem><para>The identifier used is &ldquo;FMPS_Performer:X&rdquo;, where X is the user-defined role (&ldquo;Guitar&rdquo;, &ldquo;Guitar (Backup)&rdquo;, &ldquo;Vocals&rdquo;).</para></listitem><listitem><para>The value of each identifier is the role performer's name.</para></listitem></itemizedlist><sect3>
<title>MP3</title>
<para>MP3 performer role information should be stored in a TXXX frame with the Description set to the specified identifier/role and the Text set to the role performer.</para></sect3><sect3>
<title>VorbisComments</title>
<para>Any file supporting VorbisComments (Vorbis, FLAC, Theora, Speex) should use the specified identifier/role as the Key and the role performer as the Value.</para></sect3></sect2></sect1><sect1>
<title>Filesystem Directives</title>
<para>Common functionality for many media players is the notion of a library or collection as a store of media objects that can be played. Generally, users specify or drag-n-drop directories or files that they wish to have added to this store. These subsections contain files that can be present on a user's filesystem to allow for more fine-grained control over import.</para><sect2>
<title>Ignore Directive</title>
<para>When a directory is being parsed, it should first be checked for a file with the name &ldquo;fmps_ignore&rdquo;. If present, the parser should ignore that directory's files.</para></sect2></sect1></article>