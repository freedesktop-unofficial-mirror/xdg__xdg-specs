<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">

<!-- XML file was created by LyX 1.6.4
  See http://www.lyx.org/ for more information -->
<article lang="en_US">
<articleinfo>
<title>Free Media Player Specifications</title>
</articleinfo><articleinfo>
<title>Tag Specification</title>
<date>January 25th, 2010</date><author>
Copyright 2009-2010 by <firstname>Jeff</firstname> <surname>Mitchell</surname>To be released under an appropriate license when one is selected</author><abstract>
<para>This specification describes various audio file tag metadata intended to increase interoperability between free music players for things such as ratings, playcounts, performer roles, and more. It does this by proposing standards for common functionality needs where none currently exist, and doing so in a way that is easily adoptable cross-player and cross-format. It is designed to be robust against future needs and to prevent possible conflicts with other tag identifiers and values.</para>
</abstract></articleinfo><sect1>
<title>Metadata Tags</title>
<para>The metadata tag formats evolved from Quod Libet's VorbisComments suggestions at <url>http://code.google.com/p/quodlibet/wiki/Specs_VorbisComments</url>, however this attempts to not only address ambiguities and incompatibilities with the specification at that URL, but also to define how this functionality should be applied cross-format. It is intended that as usable ways of inserting the metadata described become available for formats not currently specified, that this document will be updated to meet those needs.</para>
<para>All newly-specified tags carry an identifier &ldquo;FMPS_&rdquo; to tie the tags to this specification. The reason is simple. Since the official metadata specifications either fail to define or define unusable tags, these value are only official to the extent that this specification is adopted. Without an identifier to give context to the meanings and limitations of the values, there is a real possibility that a noncompliant media player will use the same tag names in an incompatible fashion, whether intentionally or not, and there is no way to determine whether a seemingly compatible use of the tags by a noncompliant player actually results in user-intended behavior. The &ldquo;FMPS_&rdquo; identifier and this specification document is therefore used in a similar fashion to XML schema declarations.</para>
<para>As these identifiers are read and modified only by players and advanced users, it is not expected to be a hindrance to adoption or to cause undue burden on either.</para><sect2>
<title>Common Data and Tag Information</title>
<para>This section provides &ldquo;up-front&rdquo; information that is pertinent to all tags described below, such as what encoding to use and which tags to use in various formats.</para>
<para>For all tag formats, the following is defined:</para><itemizedlist>
<listitem><para>All identifers and values are strings in UTF-8 encoding. To keep the specification simple, no ranges of control characters are defined which should never be included in a string. It is assumed that the used string-handling library will properly handle any such characters encountered.</para></listitem><listitem><para>A period/full stop is used to separate the digits in a float value from the fractional part of the float. All float values must include a period/full stop (1 is not acceptable; 1.0 is correct).</para></listitem><listitem><para>Float values should be limited to six decimal places.</para></listitem><listitem><para>Any spaces in identifiers should be represented using underscores ( _ ) instead, although this can be converted to spaces for display to the user.</para></listitem><listitem><para>Although identifier case is specified for the different types of tags, it is probably a good idea to do comparisons against identifier strings converted to all upper- or lower-case in case some implementations do not properly adhere to the case specified. Note that where identifiers also store other information (for instance FMPS_RATING_CRITIC_Metacritic), proper capitalization for the variable part of the identifier should be used, as this should be displayed as-is to the user.</para></listitem><listitem><para>Variable parts of identifiers should use equal signs (&ldquo;=&rdquo;) to denote spaces when the variable is a person's name, and underscores (&ldquo;_&rdquo;) to denote spaces when the variable is the name of a publication or site.</para></listitem></itemizedlist><para>The following sections describe where the information should be stored in specific tag formats.</para><sect3>
<title>MP3</title>
<para>MP3 values should be stored in a TXXX frame with the Description set to the specified identifier and the Text set to the string representation of the value. The Description should be in CamelCase as specified in the following sections, e.g. FMPS_Rating.</para></sect3><sect3>
<title>VorbisComments</title>
<para>Any file supporting VorbisComments (Vorbis, FLAC, Theora, Speex) should add a comment with the Key set to the specified identifier and the Value set to the string representation of the value. The Key should be in all upper-case, e.g. FMPS_RATING.</para></sect3><sect3>
<title>APEv2</title>
<para>Any file supporting APEv2 should add a comment with the Key set to the specified identifier and the Value set to the string representation of the value. The Key should be in all upper-case, e.g. FMPS_RATING.</para></sect3><sect3>
<title>MP4</title>
<para>MP4 values should be stored at ----:com.apple.iTunes:Identifier with the value a string representation of the tag's value. The Identifier should be in CamelCase as specified in the following sections, e.g. FMPS_Rating.</para></sect3><sect3>
<title>Windows Media</title>
<para>Windows Media values should be stored in the FMPS/Identifier namespace with the value a string representation of the tag's value. The Identifier should be in CamelCase as specified in the following sections, e.g. FMPS_Rating.</para></sect3></sect2><sect2>
<title>Song Rating Tags</title>
<para>Most media players support the notion of rating content, however standards for storing ratings in files do not exist. Some file metadata formats completely lack rating fields; others require personal information to be used as an identifier (such as a user's email address) or an organizational identifier (which reduces cross-player compatibility). The goal therefore is simple: to avoid any personal identifying information but avoid tying the rating to a specific player.</para>
<para>Three types of ratings are currently defined: user ratings, critic ratings, and automatic (or algorithmic) ratings.</para>
<para>Although users are more naturally able to understand integer ratings, only advanced users will interact with these tags directly; otherwise they will be presented to the user via a conforming application. Meanwhile, there are tangible benefits to storing ratings as floating-point numbers, mainly due to the fact that the increased precision allows for a number of interesting and useful algorithmic rating schemes to be used. However, using both integer and floating-point values unnecessarily increases complexity of both this spec and application code. Therefore, both values are stored as floating-point numbers. Conversion to and from these and an integer scale presented to the user in an application is easily accomplished in the application's code if it is so desired.</para>
<para>If a combination of rating tags exist when a file is being imported or read into a player's library, the user rating is considered canonical and takes precedence, meaning that if only a single value is being shown to the user it should be the user-defined value.</para>
<para>For all tag formats, the following is defined:</para><itemizedlist>
<listitem><para>A file that has no such tag is to be considered unrated for that purpose (user or algorithm).</para></listitem><listitem><para>If a user removes ratings from a track in the media player, the user rating tag should be removed as well. The algorithmic rating tag does not have to be removed in this instance.</para></listitem><listitem><para>The identifier for the (canonical) user rating is &ldquo;FMPS_Rating&rdquo;. This should be set whenever a user rates the track, regardless of whether they are also using user-specific ratings as described below.</para></listitem><listitem><para>If a player supports the notion of multiple users (perhaps from discovery of the current user from the operating system) and wishes to allow the users to keep separate ratings, the identifier should be in the form &ldquo;FMPS_Rating_User_Identifier&rdquo; where identifier is a user-defined value. Any spaces in the username should be converted to = signs, e.g. &ldquo;FMPS_Rating_User_Jeff=Mitchell&rdquo;.</para></listitem><listitem><para>The identifier for critic ratings is &ldquo;FMPS_Rating_Critic_X&rdquo; where X names either a publication/site (&ldquo;Rolling_Stone&rdquo;, &ldquo;Metacritic&rdquo;) or a person in Firstname=Lastname format (&ldquo;Ralph=Gleason&rdquo;).</para></listitem><listitem><para>The identifier for the algorithmic rating is &ldquo;FMPS_Rating_Algorithm_X&rdquo; where X names an arbitrary algorithm name.</para></listitem><listitem><para>Ratings are a float value between 0.0 and 1.0, inclusive. 0.0 is the lowest possible rating; 1.0 is the highest possible rating.</para></listitem><listitem><para>Ratings should only be rounded when necessary, in order to increase cross-player compatibility.</para></listitem></itemizedlist><para>A note on that last point: some players may only allow users to rate in increments of whole numbers between 1 and 5; others 0 and 10; and so on. However, players should try to ensure that the rating they display and use for any purposes adheres to that saved in the tag when possible. For instance, if a track has a rating of 0.9 and an application only shows ratings using five star icons in full-star increments, this would be rounded within the application to five stars. However, the user may in fact have set the rating to 9/10 in another application. If the rating was being shown numerically, ideally the application would only round this number when absolutely necessary and display 4.5 instead of 5, which would more accurately reflect the user's set rating.</para></sect2><sect2>
<title>Playcount Tags</title>
<para>As with ratings, there are both user and automatic playcount tags. The user tag is canonical and intended to be used in the normal sense, tracking how many times a song has been played (as defined below). The auto/algorithmic value can be used in an application-specific way to do interesting things; for instance, to cumulatively track exact percentages of tracks played, in order to display to the user the number of days/hous/minutes/seconds they have spent listening to a particular song. </para>
<para>As with ratings, if both tags exist when a file is being imported or read into a player's library, the user playcount takes precedence for display.</para>
<para>For all tag formats, the following is defined:</para><itemizedlist>
<listitem><para>A file that has no such tag is to be considered unplayed for that purpose (user or algorithm). Removing playcount information from a track in the media player should cause the user playcount tag to be removed as well. The algorithmic playcount tag does not have to be removed in this instance.</para></listitem><listitem><para>The identifier for the (canonical) user playcount is &ldquo;FMPS_Playcount&rdquo;. This should be incremented every time a user plays the track, regardless of whether they are also using user-specific playcounts as described below.</para></listitem><listitem><para>If a player supports the notion of multiple users (perhaps from discovery of the current user from the operating system) and wishes to allow the users to keep separate playcounts, the identifier should be in the form &ldquo;FMPS_Playcount_User_X&rdquo; where X is a user-defined value. Any spaces in the username should be converted to = signs, e.g. &ldquo;FMPS_Playcount_User_Jeff=Mitchell&rdquo;.</para></listitem><listitem><para>The identifier for an algorithmic rating is &ldquo;FMPS_Playcount_Algorithm_X&rdquo; where X names an arbitrary algorithm name.</para></listitem><listitem><para>Playcounts are a float value with a minimum of 0.0, where 0.0 is an acceptable value but indicates that a track has not been played (the same as if the track had no playcount tag). Playcounts (especially the user playcount) can be shown to the user as integers but must always be stored as a float.</para></listitem><listitem><para>For the user playcount, playing a track (subject to the criteria below) increases the user playcount value by 1.0. For the algorithmic playcount, a track's length should be considered to be worth 1.0; the user skipping parts of the track may decrease the value below 1.0, and the user repeating parts of the track may increase this value past 1.0.</para></listitem><listitem><para>The maximum value is 0.000001 less than the largest value able to be stored in a 32-bit unsigned integer: 4,294,967,294.999999. This is so that the float playcount value can be rounded to an integer equivalent, if necessary.</para></listitem></itemizedlist><para>The user playcount isn't meant to be set by the user, but rather to follow these rules that define user behavior. A file is to be considered &ldquo;played&rdquo; if it meets the following criteria, inspired by Last.fm's scrobbling rules:</para><itemizedlist>
<listitem><para>If the track is less than 30 seconds long, the entire song must be played.</para></listitem><listitem><para>If the track is more than 30 seconds long, at least fifty percent of the file must be played, calculated via length of track. For instance, if a track is one minute long, at least thirty seconds of the track must have been played, although if the user skips backwards multiple times and listens to the same ten seconds of the track three times in a row, this may be considered a valid playcount.</para></listitem></itemizedlist></sect2><sect2>
<title>Performer Roles</title>
<para>Performer roles allow you to describe the performers in a track. Current support for these roles in tag formats is sporadic or difficult to parse. As many of these tags as desired can be specified, to include all relevant performer information.</para>
<para>For all tag formats, the following is defined:</para><itemizedlist>
<listitem><para>The identifier used is &ldquo;FMPS_Performer:X&rdquo;, where X is the user-defined role (&ldquo;Guitar&rdquo;, &ldquo;Guitar (Backup)&rdquo;, &ldquo;Vocals&rdquo;).</para></listitem><listitem><para>The value of each identifier is the role performer's name.</para></listitem></itemizedlist></sect2><sect2>
<title>Lyrics</title>
<para>Embedding lyrics into a file allows users to save custom lyrics and to still see the lyrics when not connected to the Internet. Since different users may wish to have different sets of lyrics (for example, if customizing lyrics against a music-only track) and different Internet sources may have different lyrics, it is possible to store multiple lyrics values by specifying a source.</para>
<para>For all tag formats, the following is defined:</para><itemizedlist>
<listitem><para>The identifier for the (canonical) lyrics text is &ldquo;FMPS_Lyrics&rdquo;. The data must be a UTF-8 string of arbitrary length. Spaces, tabs, and newlines should be preserved when saving the string and displayed properly to the user.</para></listitem><listitem><para>Lyrics identifiers may contain information as to the source: &ldquo;FMPS_Lyrics_From_X&rdquo; where X names either a publication/site (&ldquo;Lyrics_Magazine&rdquo;) or a person in Firstname=Lastname format (&ldquo;Jeff=Mitchell&rdquo;).</para></listitem></itemizedlist></sect2></sect1><sect1>
<title>Examples</title>
</sect1></article>