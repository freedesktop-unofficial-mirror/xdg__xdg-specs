<?xml version="1.0"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
]>
<article id="index">
  <articleinfo>
    <title>Sound Theme Specification</title>
    <releaseinfo>Version 0.1</releaseinfo>
    <date>February 11 2008</date>
    <authorgroup>
      <author>
	<firstname>Marc-Andre</firstname>
	<surname>Lureau</surname>
	<affiliation>
	  <address>
	    <email>marc-andre.lureau@nokia.com</email>
	  </address>
	</affiliation>
      </author>
    </authorgroup>
  </articleinfo>

  <sect1 id="overview">
    <title>Overview</title>
    <para>
    A sound theme is a set of sounds that share a common feel, or
    instrument set.  The user can then select the sound theme that
    they want to use, and all apps use sounds from the theme. The
    initial user of sounds themes is the desktop notification
    service. But it can have other uses.
    </para>
    <para>
    From a programmer perspective a sound theme is just a
    mapping. Given a set of directories to look for sounds in and a
    theme name it maps from sound name to an sound filename.
    </para>
  </sect1>

  <sect1 id="definitions">
    <title>Definitions</title>
    <variablelist>
      <varlistentry>
	<term>Sound Theme</term>
	<listitem>
	  <para>
          A sound theme is a named set of sounds. It is used to map
          from a sound name. Themes may inherit
          from other themes as a way to extend them.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>Sound file</term>
	<listitem>
	  <para>
          The supported sound file formats are WAV/PCM 48kHz, 16bits,
          and OGG/Vorbis.  WAV is the recommended uncompressed format,
          and OGG/Vorbis is for compressed. Support for OGGs is
          optional.
	  </para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>Base Directory</term>
	<listitem>
	  <para>
          Sounds and themes are searched for in a set of directories,
          called base directories. The themes are stored in
          subdirectories of the base directories.
	  </para>
	</listitem>
      </varlistentry>
    </variablelist>
  </sect1>

  <sect1 id="directory_layout">
    <title>Directory Layout</title>
    <para>
    Sounds and themes are looked for in a set of directories. By
    default, apps should look in $XDG_DATA_DIRS/sounds.  Applications
    may further add their own sound directories to this list, and
    users may extend or change the list (in application/desktop
    specific ways).In each of these directories themes are stored as
    subdirectories. A theme can be spread across several base
    directories by having subdirectories of the same name. This way
    users can extend and override system themes.
    </para>
    <para>
    In order to have a place for third party applications to install
    their sounds there should always exist a theme called
    "freedesktop" The data for the freedesktop theme is available for
    download at: http://www.freedesktop.org/software/sound-theme/.
    Implementations are required to look in the "freedesktop" theme if
    a sound was not found in the current theme.
    </para>
    <para>
    Each theme is stored as subdirectories of the base
    directories. The internal name of the theme is the name of the
    subdirectory, although the user-visible name as specified by the
    theme may be different. Hence, theme names are case sensitive, and
    are limited to ASCII characters. Theme names may also not contain
    comma or space.
    </para>
    <para>
    In at least one of the theme directories there must be a file
    called index.theme that describes the theme. The first index.theme
    found while searching the base directories in order is used. This
    file describes the general attributes of the theme.
    </para>
    <para>
    In the theme directory are also a set of subdirectories containing
    sound files. The subdirectories are allowed to be several levels
    deep, e.g. the subdirectory "alerts/fr" in the theme "freedesktop"
    would end up at $basedir/freedesktop/alerts/fr. (FIXME)
    </para>
    <para>
    The sounds files must be one of the types: WAV/PCM 48kHz, 16 bits or OGG/Vorbis.
    The extension must be ".wav", or ".ogg" respectively (lower case). The
    support for OGG files is optional. Implementations that do not
    support OGGs should just ignore any ".ogg" files. In
    addition to this there may be an additional file with extra
    sound-data for each file. It should have the same basename as the
    sound file, with the extension ".sound". e.g. if the sound file is
    called "system-log-out.wav" the corresponding file would be named
    "system-log-out.sound".
    </para>
  </sect1>

  <sect1 id="file_formats">
    <title>File Formats</title>
    <para>
    Both the sound theme description file and the sound data files are
    ini-style text files, as described in the desktop file
    specification. They don't have any encoding field. Instead, they
    must always be stored in UTF-8 encoding.
    </para>
    <para>
    The index.theme file must start with a section called <citetitle>Sound
    Theme</citetitle>, with contents according to table 1 below. All lists are
    comma-separated.
    <table>
      <title>Standard Keys</title>
      <tgroup cols="4">
	<thead>
	  <row>
	    <entry>Key</entry>
	    <entry>Description</entry>
	    <entry>Value Type</entry>
	    <entry>Required</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>Name</entry>
	    <entry>
              short name of the sound theme, used in e.g. lists when
              selecting themes.
	    </entry>
	    <entry>localestring</entry>
	    <entry>YES</entry>
	  </row>
	  <row>
	    <entry>Comment</entry>
	    <entry>
              longer string describing the theme
	    </entry>
	    <entry>localestring</entry>
	    <entry>YES</entry>
	  </row>
	  <row>
	    <entry>Inherits</entry>
	    <entry>
              <para>
              The name of the theme that this theme inherits from. If a sound
              name is not found in the current theme, it is searched for in the
              inherited theme (and recursively in all the inherited themes).
              </para>
              <para>
              If no theme is specified implementations are required to add
              the "freedesktop" theme to the inheritance tree. An implementation
              may optionally add other default themes in between the last
              specified theme and the freedesktop theme.
              </para>
	    </entry>
	    <entry>strings</entry>
	    <entry>NO</entry>
	  </row>
	  <row>
	    <entry>Directories</entry>
	    <entry>
             list of subdirectories for this theme. For every
             subdirectory there must be a section in the index.theme
             file describing that directory.
	    </entry>
	    <entry>strings</entry>
	    <entry>YES</entry>
	  </row>
	  <row>
	    <entry>Hidden</entry>
	    <entry>
            Whether to hide the theme in a theme selection user interface.
            This is used for things such as fallback-themes that are not supposed
            to be visible to the user.
	    </entry>
	    <entry>boolean</entry>
	    <entry>NO</entry>
	  </row>
	  <row>
	    <entry>Example</entry>
	    <entry>
              The name of a sound that should be used as an example of
              how this theme sounds like.
	    </entry>
	    <entry>string</entry>
	    <entry>NO</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
    </para>
    <para>
    Each directory specified in the Directory key has a corresponding section
    with the same name as the directory. The contents of this section is
    listed in table 2 below.
    <table>
      <title>Per-Directory Keys</title>
      <tgroup cols="4">
	<thead>
	  <row>
	    <entry>Key</entry>
	    <entry>Description</entry>
	    <entry>Value Type</entry>
	    <entry>Required</entry>
	    <entry>Type</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>Length</entry>
	    <entry>
              Nominal length in seconds of the sounds in this directory. (FIXME)
	    </entry>
	    <entry>integer</entry>
	    <entry>YES</entry>
	  </row>
	  <row>
	    <entry>Context</entry>
	    <entry>
              The context the icon is normally used in. This
              is in detail discussed in <xref linkend="context"/>.
	    </entry>
	    <entry>string</entry>
	    <entry>NO</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
    </para>
    <para>
    In addition to these groups you may add extra groups to the
    index.theme file in order to extend it. These extensions must
    begin with "X-", and can be used to add desktop specific
    information to the theme file. Example group names would be "X-KDE
    Sound Theme" or "X-Gnome Sound Theme".
    </para>
    <para>
    The optional filename.sound file contains a group called "Sound
    Data", with the content listed in table 3.
    <table>
      <title>Sound Data Keys</title>
      <tgroup cols="4">
	<thead>
	  <row>
	    <entry>Key</entry>
	    <entry>Description</entry>
	    <entry>Value Type</entry>
	    <entry>Required</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>DisplayName</entry>
	    <entry>
              A translated UTF8 string that can be used instead of the
              icon name when the icon is listen in e.g. a user interface.
	    </entry>
	    <entry>localestring</entry>
	    <entry>NO</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>
    </para>
    <para>
    Extensions to the filename.sound file are allowed, but the
    keys must be begin with "X-" to avoid collisions with future
    standardized extensions to this format.
    </para>

    <sect2 id="context">
	<title>Context</title>

	<para>The <systemitem>Context</systemitem> allows
    	  the designer to group sounds on a conceptual level.
	  It doesn't act as a namespace in the file system, such
	  that sounds can have identical names, but allows
	  implementations to categorize and sort by it, for example.
 	</para>

	<para>These are the available contexts:</para>
	<itemizedlist>

	  <listitem>
	    <formalpara>
	    <title>Alerts</title>
	    <para>Sounds to alert the user of an action or event
	    which may have a major imact on the system or their
	    current use case, such as
	    <action>dialog-error</action>.</para>
	    </formalpara>
	  </listitem>

	  <listitem>
	    <formalpara>
	    <title>Notifications</title>
	    <para>Sounds to notify the user that the system, or their
	    current use case has changed state in some way, e.g. new email
	    arriving, new non-critical update available...</para>
	    </formalpara>
	  </listitem>

	  <listitem>
	    <formalpara>
	      <title>Support</title>
	      <para>Sounds that give the user feedback on their
	      actions. Sounds on window opening / closing for
	      example.</para>
	    </formalpara>
	  </listitem>

	</itemizedlist>

    </sect2>
  </sect1>

  <sect1 id="sound_lookup">
    <title>Sound Lookup</title>
    <para>
    The sound lookup mechanism has two global settings, the list of
    base directories and the internal name of the current theme. Given
    these we need to specify how to look up  sound file from the sound
    name.
    </para>
    <para>
    The lookup is done first in the current theme, and then
    recursively in each of the current theme's parents, and finally in
    the default theme called "freedesktop" (implementations may add
    more default themes before "freedesktop", but "freedesktop" must
    be last). As soon as there is a sound that matches in a theme, the
    search is stopped.
    </para>
    <para>
    The lookup inside a theme is done in three phases. First all the
    directories are scanned for an exact match, e.g. one where the
    locale of the sound match what was looked up. Then all
    the directories are scanned for any sound that matches the name. If
    that fails we finally fall back on unthemed sound. If we fail to
    find any sound at all it is up to the application to pick a good
    fallback, as the correct choice depends on the context.
    </para>
    <para>
    The exact algorithm (in pseudocode) for looking up a sound in a theme
    (if the implementation supports OGG) is:
    <programlisting>
FindSound(sound, locale) {
  filename = FindSoundHelper(sound, locale, user selected theme);
  if filename != none
    return filename

  filename = FindSoundHelper(sound, locale, "freedesktop");
  if filename != none
    return filename

  return LookupFallbackSound (sound)
}
FindSoundHelper(sound, locale, theme) {
  filename = LookupIcon (sound, locale, theme)
  if filename != none
    return filename

  if theme has parents
    parents = theme.parents

  for parent in parents {
    filename = FindSoundHelper (sound, locale, parent)
    if filename != none
      return filename
  }
  return none
}
     </programlisting>
     With the following helper functions:
     <programlisting>
LookupSound (sound, locale, theme) {
  for each subdir in $(theme subdir list) {
    for each directory in $(basename list) {
      for extension in ("wav", "ogg") {
        if DirectoryMatchesLocale(subdir, size) {
          filename = directory/$(themename)/subdir/sound.extension
          if exist filename
	    return filename
        }
      }
    }
  }
  return none
}

LookupFallbackSound (sound) {
  for each directory in $(basename list) {
    for extension in ("wav", "ogg") {
      if exists directory/sound.extension
        return directory/sound.extension
    }
  }
  return none
}

DirectoryMatchesLocale(subdir, locale) {
  read Type and size data from subdir
  if Type is Fixed
    return Size == iconsize
  if Type is Scaled
    return MinSize &lt;= iconsize &lt;= MaxSize
  if Type is Threshold
    return Size - Threshold &lt;= iconsize &lt;= Size + Threshold
}
</programlisting>
    </para>
    <para>
      In some cases you don't always want to fall back to a sound in
      an inherited theme. For instance, sometimes you look for a set
      of sounds, prefering any of them before using a sound from an
      inherited theme. To support such operations implementations can
      contain a function that finds the first of a list of sound names
      in the inheritance hierarchy. I.E. It would look something like
      this:
<programlisting>
FindBestSound(soundlist, size) {
  filename = FindBestSoundHelper(iconList, size, user selected theme);
  if filename != none
    return filename

  filename = FindBestSoundHelper(iconList, size, "freedesktop");
  if filename != none
    return filename

  for icon in iconList {
    filename = LookupFallbackSound (icon)
    if filename != none
      return filename
  }
  return none;
}
FindBestSoundHelper(soundlist, size, theme) {
  for icon in iconList {
    filename = LookupIcon (icon, size, theme)
    if filename != none
      return filename
  }

  if theme has parents
    parents = theme.parents

  for parent in parents {
    filename = FindBestIconHelper (iconList, size, parent)
    if filename != none
      return filename
  }
  return none
}
</programlisting>
    This can be very useful for example when handling mimetype icons, where there
    are more and less "specific" versions of icons.
    </para>
  </sect1>

  <sect1 id="example">
    <title>Example</title>
    <para>
     Here is an example index.theme file:
     <programlisting>[Sound Theme]
Name=Birch
Name[fr]=Bouleau
Comment=Sound theme using wooden instruments
Comment[fr]=Theme utilisant des instruments en bois
Inherits=wood,default
Directories=

[scalable/apps]
Context=Applications

</programlisting>
     The corresponding directory tree in the /usr/share/sounds
     directory could look like this:
     <programlisting>birch/index.theme
birch/scalable/apps/mozilla.svg
birch/scalable/mimetypes/mime_text_plain.svg
birch/scalable/mimetypes/mime_text_plain.icon
birch/48x48/apps/mozilla.png
birch/32x32/apps/mozilla.png
birch/48x48/mimetypes/mime_text_plain.png
birch/48x48/mimetypes/mime_text_plain.icon</programlisting>
Where birch/scalable/mimetypes/mime_text_plain.icon contains:
     <programlisting>[Icon Data]
DisplayName=Mime text/plain
EmbeddedTextRectangle=100,100,900,900
AttachPoints=200,200|800,200|500,500|200,800|800,800</programlisting>
And birch/48x48/mimetypes/mime_text_plain.icon contains:
     <programlisting>[Icon Data]
DisplayName=Mime text/plain
EmbeddedTextRectangle=8,8,40,40
AttachPoints=20,20|40,40|50,10|10,50</programlisting>
    </para>
    <para>
    In this example a lookup of "mozilla" would get the prerendered
    48x48 and 32x32 icons before the SVG icons due to the order of
    Directories.
    </para>

  </sect1>

  <sect1 id="install_sounds">
    <title>Installing Application Sounds</title>
    <para>
    So, you're an application author, and you want to install sounds
    so that they can be used by your application. Minimally you should install
    the sound file in the "freedesktop" theme. This means installing a WAV file in
    $XDG_DATA_DIRS/sounds/freedesktop/. Optionally you can install sounds in different
    languages. For example, installing a svg icon in $prefix/share/icons/hicolor/scalable/apps
    means most desktops will have one icon that works for all sizes. You might even want to
    install icons with a look that matches other well known themes so your application
    will fit in with some specific desktop environment.
    </para>
    <para>
    It is recommended that the icons installed in the hicolor theme look neutral,
    since it is a fallback theme that will be used in combination with some very
    different looking themes. But if you don't have any neutral icon, please install
    whatever icon you have in the hicolor theme so that all applications get at
    least some icon in all themes.
    </para>
  </sect1>

  <sect1 id="implementation_notes">
    <title>Implementation Notes</title>
    <para>
    The algorithm as described in this document works by always
    looking up filenames in directories (a stat in unix
    terminology). A good implementation is expected to read the
    directories once, and do all lookups in memory using that
    information.
    </para>
    <para>
    This caching can make it impossible for users to add sounds without
    having to restart applications. In order to handle this, any
    implementation that does caching is required to look at the mtime
    of the toplevel icon directories when doing a cache lookup, unless
    it already did so less than 5 seconds ago. This means that any
    icon editor or theme installation program need only to change the
    mtime of the the toplevel directory where it changed the theme to
    make sure that the new icons will eventually get used.
    </para>
  </sect1>

  <sect1 id="background">
    <title>Background</title>
    <para>
    The icon theme specification is based on the original
    KDE icon theme system designed by Antonio Larossa,
    Geert Janssen and Torsten Rahn. The common specification
    mostly adds support for .icon files, renames the icon theme
    description files and removes a few references to kde in them.
    </para>
  </sect1>

  <appendix id="changes">
    <title>Change history</title>
    <formalpara>
      <title>Version 0.1, 11 February 2008, Marc-Andre Lureau</title>
      <para>
	<itemizedlist>
	  <listitem>
	    <para>
	      Initial draft.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
    </formalpara>
  </appendix>
</article>
